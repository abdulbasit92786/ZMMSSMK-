// ✅ Save user to Firebase during registration
function saveUserToFirebase(email, username, password) {
  return firebase.auth().createUserWithEmailAndPassword(email, password)
    .then(userCredential => {
      const userId = userCredential.user.uid;

      // Save additional user data to Realtime Database
      return firebase.database().ref("users/" + userId).set({
        email: email,
        username: username,
        registeredAt: Date.now(),
        verified: false
      });
    });
}

// ✅ Verify user by setting verified=true in Firebase
function verifyEmailInFirebase(email, code) {
  const sentCode = sessionStorage.getItem("code");
  if (code !== sentCode) return Promise.reject("Code mismatch");

  // Find user by email (simple logic — better with Firebase Queries)
  return firebase.database().ref("users").once("value").then(snapshot => {
    const users = snapshot.val();
    const userId = Object.keys(users).find(key => users[key].email === email);

    if (!userId) throw "User not found";

    return firebase.database().ref("users/" + userId).update({
      verified: true
    });
  });
}

// ✅ Login with Firebase Auth + check verification
function loginUserFromFirebase(email, password) {
  return firebase.auth().signInWithEmailAndPassword(email, password)
    .then(userCredential => {
      const userId = userCredential.user.uid;

      return firebase.database().ref("users/" + userId).once("value").then(snapshot => {
        const userData = snapshot.val();
        if (!userData.verified) throw "not_verified";

        sessionStorage.setItem("loggedInUser", JSON.stringify(userData));
        return "success";
      });
    })
    .catch(error => {
      if (error === "not_verified") return "not_verified";
      return "not_found";
    });
}
